{"version":3,"sources":["components/Game/gameComponents/PokemonCard/PokemonCard.js","components/Game/Game.js","components/Home/Home.js","components/LeaderBoard/LeaderBoard.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","card","maxWidth","media","auto","height","width","objectFit","props","classes","react_default","a","createElement","Card_default","className","CardActionArea_default","CardMedia_default","component","alt","name","image","title","CardContent_default","Typography_default","gutterBottom","variant","Game","state","pokemon","clicked","componentDidMount","_this","setState","shuffle","Pokemon","handleClick","indexOf","alert","clickedArr","push","_this2","this","Fragment","Grid_default","container","spacing","map","index","onClick","item","xs","gameComponents_PokemonCard_PokemonCard","Component","Home","LeaderBoard","root","flexGrow","grow","menuButton","marginLeft","marginRight","AppBar_default","position","Toolbar_default","color","Link","to","style","textDecoration","Button_default","App","BrowserRouter","Navbar_Navbar","Route","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.362484e1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nconst styles = {\r\n  card: {\r\n    maxWidth: 345\r\n  },\r\n  media: {\r\n    auto: 'auto',\r\n    height: '100px',\r\n    width: '100px',\r\n    objectFit: 'fixed'\r\n\r\n  }\r\n};\r\n\r\nconst PokemonCard = (props) => {\r\n  const { classes } = props;\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component='img'\r\n          alt={props.name}\r\n          className={classes.media}\r\n          image={props.image}\r\n          title={props.name}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {props.name}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n\r\n    </Card>\r\n  );\r\n}\r\n\r\nPokemonCard.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(PokemonCard);\r\n","import React, { Component } from 'react'\r\nimport Pokemon from './pokemon.json'\r\nimport PokemonCard from './gameComponents/PokemonCard'\r\nimport shuffle from 'shuffle-array'\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    pokemon: [],\r\n    clicked: []\r\n  }\r\n   \r\n  componentDidMount = () => {\r\n    this.setState({ pokemon: shuffle(Pokemon)})\r\n  }\r\nhandleClick = name => {\r\n  if (this.state.clicked.indexOf(name) !== -1) {\r\n    alert('You Lose!')\r\n  } else {\r\n  let clickedArr = this.state.clicked\r\n  clickedArr.push(name)\r\n  this.setState({pokemon: shuffle(Pokemon), clicked: clickedArr})\r\n  }\r\n}\r\n\r\n  render () {\r\n    return (\r\n      <>\r\n     \r\n      <Grid container spacing ={16}>\r\n      {\r\n            this.state.pokemon.map((pokemon, index) => index < 16 ? <Grid onClick={() => this.handleClick(pokemon.name)}  item xs={3}><PokemonCard  name={pokemon.name} image = {pokemon.image}/></Grid> : null)         \r\n      }    \r\n      </Grid> \r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game","import React from 'react'\r\n\r\nconst Home = () =>\r\n<h1>Click on New Game to begin</h1>\r\n\r\nexport default Home\r\n","import React from 'react'\r\nconst LeaderBoard = () =>\r\n<h1>Leaderboard</h1>\r\n\r\nexport default LeaderBoard","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nimport { Link } from 'react-router-dom'\r\n \r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  grow: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20\r\n  }\r\n};\r\n\r\nfunction Navbar(props) {\r\n  const { classes } = props;\r\n  return <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          \r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            Pokemon Click Game\r\n          </Typography>\r\n        <Link to=\"/\" style={{ color: \"white\", textDecoration: \"none\" }}>\r\n          <Button color='inherit'>Home\r\n          </Button>\r\n        </Link>\r\n          \r\n        <Link to=\"/game\" style={{ color: \"white\", textDecoration: \"none\" }}>\r\n            <Button color='inherit'>\r\n              New Game\r\n              </Button>\r\n            </Link>\r\n          <Link to=\"/leaderboard\" style={{ color: \"white\", textDecoration: \"none\" }}>\r\n            <Button color='inherit'>\r\n              Leaderboard\r\n               </Button>\r\n            </Link>         \r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>;\r\n}\r\n\r\nNavbar.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Navbar);\r\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport Game from './components/Game'\nimport Home from './components/Home'\nimport LeaderBoard from './components/LeaderBoard'\nimport Navbar from './components/Navbar'\n\nclass App extends Component {\n  render() {\n    return (\n      <>     \n     \n      <Router>\n          <div>\n          <Navbar /> \n          <Route exact path=\"/\"  component={Home} />\n            <Route path=\"/game\" component={Game} />\n            <Route path=\"/leaderboard\" component={LeaderBoard} />\n         </div>\n      </Router>\n      \n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}